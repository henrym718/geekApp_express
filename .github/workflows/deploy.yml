name: Deploy to AWS Fargate

# El pipeline se ejecuta cuando se hace push a la rama main
on:
  push:
    branches:
      - main

jobs:
  # Primer trabajo: Loguearse en ECR, construir y subir la imagen
  build-and-push:
    runs-on: ubuntu-latest # Corre en un entorno Ubuntu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2 # Clona el repositorio para acceder al código fuente

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 # Realiza login en Amazon ECR
        with:
          region: us-east-1 # Asegúrate de usar la región correcta de AWS

      - name: Build Docker image
        run: |
          # Construir la imagen Docker usando el Dockerfile
          docker build -t my-app .

      - name: Tag Docker image
        run: |
          # Obtener el ID de la cuenta de AWS automáticamente
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)

          # Etiquetar la imagen Docker para el repositorio ECR
          docker tag my-app:latest $aws_account_id.dkr.ecr.us-east-1.amazonaws.com/my-app:latest

      - name: Push Docker image to Amazon ECR
        run: |
          # Obtener el ID de la cuenta de AWS
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)

          # Subir la imagen a Amazon ECR
          docker push $aws_account_id.dkr.ecr.us-east-1.amazonaws.com/my-app:latest

  # Segundo trabajo: Desplegar en ECS/Fargate
  deploy:
    needs: build-and-push # Este trabajo solo se ejecuta si build-and-push se completa exitosamente
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2 # Clona el repositorio para acceder al código fuente

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json # Define la tarea ECS (la configuraremos luego)
          service: my-ecs-service # Nombre del servicio ECS
          cluster: my-ecs-cluster # Nombre del clúster ECS
          wait-for-service-stability: true # Espera hasta que el servicio esté estable

    # Inyección de las variables de entorno necesarias para la aplicación
    env:
      MONGO: ${{ secrets.MONGO }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      KEY_TOKEN_SECRET: ${{ secrets.KEY_TOKEN_SECRET }}
